
//
// Created by wes on 2/22/20.
//

#include <vector>
#include <map>
#include <cstring>
#include <iostream>
#include <chrono>
#include <algorithm>
#include <set>
#include "SKPokerEval/src/SevenEval.h"
#include "FiveEval.h"
#include "combinations/combinations.h"
#include "combination.h"

#ifndef PMF_SOLVE_H
#define PMF_SOLVE_H

#endif //PMF_SOLVE_H
FiveEval init_eval()
{
    return FiveEval();
}

extern FiveEval eval = init_eval();


std::vector<int> getRanks(std::vector<std::vector<uint8_t>> cards, std::vector<uint8_t> board) {
    std::vector<int> result;
    int numPlayers = cards.size();
    int handSize = cards[0].size();
    int tempMax, playerMax;
    if(handSize == 2) {
        for(int i = 0; i < numPlayers; i++) {
            playerMax = 0;
            for(int j = 0; j < 1; j++) {
                for(int k = j + 1; k < 2; k++) {
                    tempMax = SevenEval::GetRank(board[0], board[1], board[2], board[3], board[4], cards[i][j], cards[i][k]);
                    if(tempMax > playerMax) {
                        playerMax = tempMax;
                    }
                }
            }
            result.emplace_back(playerMax);
        }
    } else if(handSize == 4) {
        std::vector<std::vector<uint8_t>> bCombos = combination(board, 3);
        int comboLength = bCombos.size();
        for(int i = 0; i < numPlayers; i++) {
            playerMax = 0;
            for(int j = 0; j < comboLength; j++) {
                for (int k = 0; k < handSize - 1; k++) {
                    for (int l = k + 1; l < handSize; l++) {
                        tempMax = eval.GetRank(bCombos[j][0], bCombos[j][1], bCombos[j][2], cards[i][k], cards[i][l]);
                        if(tempMax > playerMax) {
                            playerMax = tempMax;
                        }
                    }
                }
            }
            result.emplace_back(playerMax);
        }
    } else {
        throw std::invalid_argument( "invalid number of cards" );
    }

    return result;
}

struct result {
    int numPlayers, boardCount;
    std::vector<float> results;
    std::vector<uint8_t> board;
    std::vector<std::vector<uint8_t>> cards;
    std::vector<std::vector<int>> massFunctions;

    result(int inNumPlayers, std::vector<std::vector<uint8_t>> inCards, std::vector<uint8_t> inBoard) {
        numPlayers = inNumPlayers;
        boardCount = 0;
        results = std::vector<float>(numPlayers);
        board = inBoard;
        cards = inCards;
        massFunctions = std::vector<std::vector<int>>(numPlayers, std::vector<int>(7463, 0));
    }

    bool operator()(uint8_t * first, uint8_t* last) {
        boardCount++;
        std::vector<uint8_t> combo = std::vector<uint8_t>(first, last);
        if (board.size() > 0) {
            combo.insert(combo.end(), board.begin(), board.end());
        }
        std::vector<int> ranks = getRanks(cards, combo);
        int maxRank = 0, maxCount;
        for (int i = 0; i < numPlayers; i++) {
            massFunctions[i][ranks[i]] += 1;
            if (ranks[i] >= maxRank) {
                if (ranks[i] == maxRank) {
                    maxCount++;
                } else {
                    maxRank = ranks[i];
                    maxCount = 1;
                }

            }
        }
        float addition = (1.0 / (float) maxCount);
        for (int i = 0; i < numPlayers; i++) {
            if (ranks[i] == maxRank) {
                results[i] += addition;
            }
        }
        return false;
    }
};


std::pair<std::vector<float>, std::vector<std::vector<int>>> buildPmf(std::vector<std::vector<uint8_t>> cards, std::vector<uint8_t> board, std::vector<uint8_t> removed) {
    std::chrono::high_resolution_clock::time_point t1 = std::chrono::high_resolution_clock::now();

    std::set<uint8_t> deck = {};
    for(int i = 0; i < 52; i++) {
        deck.insert(i);
    }

    int numPlayers = cards.size();
    for(int i = 0; i < numPlayers; i++) {
        for(int j = 0; j < (cards[0].size()); j++) {
            deck.erase(cards[i][j]);
        }
    }

    int boardLength = board.size();
    for(int i = 0; i < boardLength; i++) {
        deck.erase(board[i]);
    }

    int removeLength = removed.size();
    for(int i = 0; i < removeLength; i++) {
        deck.erase(removed[i]);
    }

    uint8_t taco[deck.size()];
    std::copy(deck.begin(), deck.end(), taco);
    int N = 5 - boardLength;
    struct result results = for_each_combination(taco, taco + N, taco + deck.size(), result(numPlayers, cards, board));
    std::vector<float> equities;
    for(int i = 0; i < numPlayers; i++) {
        equities.emplace_back(results.results[i] / (float)results.boardCount);
    }

    //reslice array to contiguous sections 7068
    std::vector<std::vector<int>> finalPmf;
    std::set<int> exclude = std::set{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,118,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,177,178,179,180,181,183,184,187,188,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,208,209,212,213,214,215,216,218,219,222,223,227,228,229,230,231,233,234,237,238,242,243,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,278,279,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,299,302,303,304,305,306,308,309,312,313,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,334,337,338,339,340,341,343,344,347,348,352,353,354,355,356,358,359,362,363,367,368,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,389,390,393,394,395,396,397,399,400,403,404,408,409,410,411,412,414,415,418,419,423,424,429,430,431,432,433,435,436,439,440,444,445,450,451,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,487,488,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,507,508,511,512,513,514,515,517,518,521,522,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,542,543,546,547,548,549,550,552,553,556,557,561,562,563,564,565,567,568,571,572,576,577,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,598,599,602,603,604,605,606,608,609,612,613,617,618,619,620,621,623,624,627,628,632,633,638,639,640,641,642,644,645,648,649,653,654,659,660,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,682,683,686,687,688,689,690,692,693,696,697,701,702,703,704,705,707,708,711,712,716,717,722,723,724,725,726,728,729,732,733,737,738,743,744,750,751,752,753,754,756,757,760,761,765,766,771,772,778,779,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,839,840,841,842,843,844,845,846,849,850,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,874,875,876,877,878,879,880,881,884,885,889,890,891,892,893,894,895,896,899,900,904,905,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,930,931,932,933,934,935,936,937,940,941,945,946,947,948,949,950,951,952,955,956,960,961,966,967,968,969,970,971,972,973,976,977,981,982,987,988,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1014,1015,1016,1017,1018,1019,1020,1021,1024,1025,1029,1030,1031,1032,1033,1034,1035,1036,1039,1040,1044,1045,1050,1051,1052,1053,1054,1055,1056,1057,1060,1061,1065,1066,1071,1072,1078,1079,1080,1081,1082,1083,1084,1085,1088,1089,1093,1094,1099,1100,1106,1107,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1134,1135,1136,1137,1138,1139,1140,1141,1144,1145,1149,1150,1151,1152,1153,1154,1155,1156,1159,1160,1164,1165,1170,1171,1172,1173,1174,1175,1176,1177,1180,1181,1185,1186,1191,1192,1198,1199,1200,1201,1202,1203,1204,1205,1208,1209,1213,1214,1219,1220,1226,1227,1234,1235,1236,1237,1238,1239,1240,1241,1244,1245,1249,1250,1255,1256,1262,1263,1270,1271,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1298,1299,1300,1301,1302,1303,1304,1305,1308,1309,1313,1314,1315,1316,1317,1318,1319,1320,1323,1324,1328,1329,1334,1335,1336,1337,1338,1339,1340,1341,1344,1345,1349,1350,1355,1356,1362,1363,1364,1365,1366,1367,1368,1369,1372,1373,1377,1378,1383,1384,1390,1391,1398,1399,1400,1401,1402,1403,1404,1405,1408,1409,1413,1414,1419,1420,1426,1427,1434,1435,1443,1444,1445,1446,1447,1448,1449,1450,1451,1453,1454,1455,1458,1459,1460,1464,1465,1466,1471,1472,1473,1479,1480,1481,1488,1489,1490,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1518,1519,1520,1521,1522,1523,1524,1525,1528,1529,1533,1534,1535,1536,1537,1538,1539,1540,1543,1544,1548,1549,1554,1555,1556,1557,1558,1559,1560,1561,1564,1565,1569,1570,1575,1576,1582,1583,1584,1585,1586,1587,1588,1589,1592,1593,1597,1598,1603,1604,1610,1611,1618,1619,1620,1621,1622,1623,1624,1625,1628,1629,1633,1634,1639,1640,1646,1647,1654,1655,1663,1664,1665,1666,1667,1668,1669,1670,1671,1673,1674,1675,1678,1679,1680,1684,1685,1686,1691,1692,1693,1699,1700,1701,1708,1709,1710,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1738,1739,1740,1741,1742,1743,1744,1745,1748,1749,1753,1754,1755,1756,1757,1758,1759,1760,1763,1764,1768,1769,1774,1775,1776,1777,1778,1779,1780,1781,1784,1785,1789,1790,1795,1796,1802,1803,1804,1805,1806,1807,1808,1809,1812,1813,1817,1818,1823,1824,1830,1831,1838,1839,1840,1841,1842,1843,1844,1845,1848,1849,1853,1854,1859,1860,1866,1867,1874,1875,1883,1884,1885,1886,1887,1888,1889,1890,1891,1893,1894,1895,1898,1899,1900,1904,1905,1906,1911,1912,1913,1919,1920,1921,1928,1929,1930,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1958,1959,1960,1961,1962,1963,1964,1965,1968,1969,1973,1974,1975,1976,1977,1978,1979,1980,1983,1984,1988,1989,1994,1995,1996,1997,1998,1999,2000,2001,2004,2005,2009,2010,2015,2016,2022,2023,2024,2025,2026,2027,2028,2029,2032,2033,2037,2038,2043,2044,2050,2051,2058,2059,2060,2061,2062,2063,2064,2065,2068,2069,2073,2074,2079,2080,2086,2087,2094,2095,2103,2104,2105,2106,2107,2108,2109,2110,2111,2113,2114,2115,2118,2119,2120,2124,2125,2126,2131,2132,2133,2139,2140,2141,2148,2149,2150,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2178,2179,2180,2181,2182,2183,2184,2185,2188,2189,2193,2194,2195,2196,2197,2198,2199,2200,2203,2204,2208,2209,2214,2215,2216,2217,2218,2219,2220,2221,2224,2225,2229,2230,2235,2236,2242,2243,2244,2245,2246,2247,2248,2249,2252,2253,2257,2258,2263,2264,2270,2271,2278,2279,2280,2281,2282,2283,2284,2285,2288,2289,2293,2294,2299,2300,2306,2307,2314,2315,2323,2324,2325,2326,2327,2328,2329,2330,2333,2334,2338,2339,2344,2345,2351,2352,2359,2360,2368,2369,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2394,2395,2398,2399,2400,2401,2402,2404,2405,2408,2409,2413,2414,2415,2416,2417,2419,2420,2423,2424,2428,2429,2434,2435,2436,2437,2438,2440,2441,2444,2445,2449,2450,2455,2456,2462,2463,2464,2465,2466,2468,2469,2472,2473,2477,2478,2483,2484,2490,2491,2498,2499,2500,2501,2502,2504,2505,2508,2509,2513,2514,2519,2520,2526,2527,2534,2535,2543,2544,2545,2546,2547,2548,2549,2550,2553,2554,2558,2559,2564,2565,2571,2572,2579,2580,2588,2589,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2614,2615,2618,2619,2620,2621,2622,2624,2625,2628,2629,2633,2634,2635,2636,2637,2639,2640,2643,2644,2648,2649,2654,2655,2656,2657,2658,2660,2661,2664,2665,2669,2670,2675,2676,2682,2683,2684,2685,2686,2688,2689,2692,2693,2697,2698,2703,2704,2710,2711,2718,2719,2720,2721,2722,2724,2725,2728,2729,2733,2734,2739,2740,2746,2747,2754,2755,2763,2764,2765,2766,2767,2768,2769,2770,2773,2774,2778,2779,2784,2785,2791,2792,2799,2800,2808,2809,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2834,2835,2838,2839,2840,2841,2842,2844,2845,2848,2849,2853,2854,2855,2856,2857,2859,2860,2863,2864,2868,2869,2874,2875,2876,2877,2878,2880,2881,2884,2885,2889,2890,2895,2896,2902,2903,2904,2905,2906,2908,2909,2912,2913,2917,2918,2923,2924,2930,2931,2938,2939,2940,2941,2942,2944,2945,2948,2949,2953,2954,2959,2960,2966,2967,2974,2975,2983,2984,2985,2986,2987,2988,2989,2990,2993,2994,2998,2999,3004,3005,3011,3012,3019,3020,3028,3029,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3054,3055,3058,3059,3060,3061,3062,3064,3065,3068,3069,3073,3074,3075,3076,3077,3079,3080,3083,3084,3088,3089,3094,3095,3096,3097,3098,3100,3101,3104,3105,3109,3110,3115,3116,3122,3123,3124,3125,3126,3128,3129,3132,3133,3137,3138,3143,3144,3150,3151,3158,3159,3160,3161,3162,3164,3165,3168,3169,3173,3174,3179,3180,3186,3187,3194,3195,3203,3204,3205,3206,3207,3208,3209,3210,3213,3214,3218,3219,3224,3225,3231,3232,3239,3240,3248,3249,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3274,3275,3278,3279,3280,3281,3282,3284,3285,3288,3289,3293,3294,3295,3296,3297,3299,3300,3303,3304,3308,3309,3314,3315,3316,3317,3318,3320,3321,3324,3325,3329,3330,3335,3336,3342,3343,3344,3345,3346,3348,3349,3352,3353,3357,3358,3363,3364,3370,3371,3378,3379,3380,3381,3382,3384,3385,3388,3389,3393,3394,3399,3400,3406,3407,3414,3415,3423,3424,3425,3426,3427,3428,3429,3430,3433,3434,3438,3439,3444,3445,3451,3452,3459,3460,3468,3469,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3494,3495,3498,3499,3500,3501,3502,3504,3505,3508,3509,3513,3514,3515,3516,3517,3519,3520,3523,3524,3528,3529,3534,3535,3536,3537,3538,3540,3541,3544,3545,3549,3550,3555,3556,3562,3563,3564,3565,3566,3568,3569,3572,3573,3577,3578,3583,3584,3590,3591,3598,3599,3600,3601,3602,3604,3605,3608,3609,3613,3614,3619,3620,3626,3627,3634,3635,3643,3644,3645,3646,3647,3648,3649,3650,3653,3654,3658,3659,3664,3665,3671,3672,3679,3680,3688,3689,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3714,3715,3718,3719,3720,3721,3722,3724,3725,3728,3729,3733,3734,3735,3736,3737,3739,3740,3743,3744,3748,3749,3754,3755,3756,3757,3758,3760,3761,3764,3765,3769,3770,3775,3776,3782,3783,3784,3785,3786,3788,3789,3792,3793,3797,3798,3803,3804,3810,3811,3818,3819,3820,3821,3822,3824,3825,3828,3829,3833,3834,3839,3840,3846,3847,3854,3855,3863,3864,3865,3866,3867,3868,3869,3870,3873,3874,3878,3879,3884,3885,3891,3892,3899,3900,3908,3909,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3938,3939,3940,3941,3942,3943,3944,3945,3948,3949,3953,3954,3955,3956,3957,3958,3959,3960,3963,3964,3968,3969,3974,3975,3976,3977,3978,3979,3980,3981,3984,3985,3989,3990,3995,3996,4002,4003,4004,4005,4006,4007,4008,4009,4012,4013,4017,4018,4023,4024,4030,4031,4038,4039,4040,4041,4042,4043,4044,4045,4048,4049,4053,4054,4059,4060,4066,4067,4074,4075,4083,4084,4085,4086,4087,4088,4089,4090,4093,4094,4098,4099,4104,4105,4111,4112,4119,4120,4128,4129,4138,4139,4140,4149,4150,4151,4160,4171,4172,4173,4182,4193,4204,4205,4206,4215,4226,4237,4248,4249,4259,4270,4281,4292,4303,4304,4314,4325,4336,4347,4358,4369,4370,4380,4391,4402,4413,4424,4435,4446,4447,4457,4468,4479,4490,4501,4512,4523,4534,4535,4545,4556,4567,4578,4589,4600,4611,4622,4633,4634,4644,4655,4666,4677,4688,4699,4710,4721,4732,4743,4744,4754,4765,4776,4787,4798,4809,4820,4831,4842,4853,4864,4865,4866,4875,4886,4897,4908,4919,4930,4941,4952,4963,4974,4985,4996,4997,4998,4999,5000,5001,5002,5003,5006,5007,5011,5012,5017,5018,5024,5025,5032,5033,5041,5042,5051,5052,5053,5062,5063,5064,5065,5066,5067,5068,5069,5072,5073,5077,5078,5083,5084,5090,5091,5098,5099,5107,5108,5117,5118,5119,5128,5129,5130,5131,5132,5133,5134,5135,5138,5139,5143,5144,5149,5150,5156,5157,5164,5165,5173,5174,5183,5184,5185,5194,5195,5196,5197,5198,5199,5200,5201,5204,5205,5209,5210,5215,5216,5222,5223,5230,5231,5239,5240,5249,5250,5251,5260,5261,5262,5263,5264,5265,5266,5267,5270,5271,5275,5276,5281,5282,5288,5289,5296,5297,5305,5306,5315,5316,5326,5327,5328,5329,5330,5332,5333,5336,5337,5341,5342,5347,5348,5354,5355,5362,5363,5371,5372,5381,5382,5392,5393,5394,5395,5396,5398,5399,5402,5403,5407,5408,5413,5414,5420,5421,5428,5429,5437,5438,5447,5448,5458,5459,5460,5461,5462,5464,5465,5468,5469,5473,5474,5479,5480,5486,5487,5494,5495,5503,5504,5513,5514,5524,5525,5526,5527,5528,5530,5531,5534,5535,5539,5540,5545,5546,5552,5553,5560,5561,5569,5570,5579,5580,5590,5591,5592,5593,5594,5596,5597,5600,5601,5605,5606,5611,5612,5618,5619,5626,5627,5635,5636,5645,5646,5656,5657,5658,5659,5660,5662,5663,5666,5667,5671,5672,5677,5678,5684,5685,5692,5693,5701,5702,5711,5712,5722,5723,5724,5725,5726,5728,5729,5732,5733,5737,5738,5743,5744,5750,5751,5758,5759,5767,5768,5777,5778,5788,5789,5790,5791,5792,5793,5794,5795,5798,5799,5803,5804,5809,5810,5816,5817,5824,5825,5833,5834,5843,5844};
    for(int i = 0; i < numPlayers; i++) {
        finalPmf.emplace_back(std::vector<int>());
        for(int j = 0; j < 7462; j++) {
            if(exclude.find(j) == exclude.end()) {
                finalPmf[i].emplace_back(results.massFunctions[i][j]);
            }
        }
    }
    std::cout << "It took me " << (std::chrono::duration_cast<std::chrono::duration<double>>(std::chrono::high_resolution_clock::now() - t1).count()) << " seconds."  << std::endl;
    return std::pair<std::vector<float>, std::vector<std::vector<int>>>(equities, finalPmf);
}

std::tuple<std::vector<std::vector<uint8_t>>, std::vector<uint8_t>, std::vector<uint8_t>> parseCards(std::string input) {
    std::map<char, uint8_t> suitLookup = {{'s', 0}, {'S', 0}, {'h', 1}, {'H', 1}, {'d', 2}, {'D', 2}, {'c', 3}, {'C', 3}};
    std::map<char, uint8_t> cardLookup = {{'A', 0}, {'a', 0}, {'K', 1}, {'k', 1}, {'Q', 2}, {'q', 2}, {'J', 3}, {'j', 3}, {'T', 4}, {'t', 4}, {'9',5}, {'8',6}, {'7',7}, {'6',8}, {'5',9}, {'4',10}, {'3',11}, {'2',12}};
    std::vector<std::vector<uint8_t>> cards;
    int boardIndex = input.find_first_of('|');
    int handSize = input.find_first_of(',');
    int removedIndex = input.find_first_of(':');
    int length = input.length();
    std::vector<uint8_t> removed = {};
    std::vector<uint8_t> board = {};

    if(removedIndex != std::string::npos) {
        for(int i = removedIndex + 1; i < length; i+=2) {
            removed.emplace_back((cardLookup[input[i]] * 4) + suitLookup[input[i+1]]);
        }
    }
    int boardEnd = (removedIndex != std::string::npos) ? removedIndex : length;
    if(boardIndex != std::string::npos) {
        for(int i = boardIndex + 1; i < boardEnd; i+=2) {
            board.emplace_back((cardLookup[input[i]] * 4) + suitLookup[input[i+1]]);
        }
    }
    int cardEnd = (boardIndex != std::string::npos)? boardIndex : ((removedIndex != std::string::npos)? removedIndex: length);
    for(int i = 0; i < cardEnd; i += handSize + 1) {
        std::vector<uint8_t> playerCards = {};
        for(int j = i; j < i + handSize; j += 2) {
            playerCards.emplace_back(cardLookup[input[j]] * 4 + suitLookup[input[j+1]]);
        }
        cards.emplace_back(playerCards);
    }
    return std::tuple(cards, board, removed);
}

std::pair<std::vector<float>, std::vector<std::vector<int>>> solve(std::string input) {
    std::tuple<std::vector<std::vector<uint8_t>>, std::vector<uint8_t>, std::vector<uint8_t>> gameState = parseCards(input);
    return buildPmf(std::get<0>(gameState), std::get<1>(gameState), std::get<2>(gameState));
}

//for each combo of hole cards, remove them from the deck and iterate over all other combos of combos